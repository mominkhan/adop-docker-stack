#! /bin/bash -e

SUB_CMD_NAME="stack"

cmd_desc() {
    echo "For running Docker Stack related commands"
}

cmd_usage() {
    echo "usage: ${CMD_NAME} ${SUB_CMD_NAME} <subcommand>"
}

help() {
    cmd_usage
    echo
    echo "Available subcommands are:"
    printf "    %-22s   %s\n" "deploy" "Deploy ADOP docker stack."
    printf "    %-22s   %s\n" "<command>" "Runs 'docker stack <command>' for ADOP, where <command> is not listed above"
    printf "    %-22s   %s\n" "help" "Prints this help information"
    echo
}

pretty_sleep() {
    secs=${1:-60}
    tool=${2:-service}
    while [ $secs -gt 0 ]; do
        echo -ne "$tool unavailable, sleeping for: $secs\033[0Ks\r"
        sleep 1
        : $((secs--))
    done
    echo "$tool was unavailable, so slept for: ${1:-60} secs"
}

prep_env() {
    if [ -z "${PROXY_IP}" ]; then
      export TARGET_HOST=localhost
      export LOGSTASH_HOST=localhost
    else
      export TARGET_HOST=${PROXY_IP}
      export LOGSTASH_HOST=${PROXY_IP}
    fi
    if [ -z "${COMPOSE_FILE}" ]; then
      export COMPOSE_FILE="${CONF_DIR}/stack/docker-compose.yml"
    fi
    if [ -z "${STACK_NAME}" ]; then
      export STACK_NAME="adop"
    fi
    if [ -z "${INITIAL_ADMIN_USER}" ]; then
      export INITIAL_ADMIN_USER="demouser"
    fi
    source ${CONF_DIR}/credentials.generate.sh
    source ${CONF_DIR}/env.config.sh
    if [ -f "${CONF_DIR}/env.override.sh" ]; then
        echo "Using ${CONF_DIR}/env.override.sh to override default values for environment variable."
        source ${CONF_DIR}/env.override.sh
    fi
}

deploy() {
    echo "* Initialising ADOP stack"
    echo
    # Load variables
    prep_env

    # Deploy ADOP stack
    echo "* Deploying ADOP stack..."
    echo
    run_stack deploy -c "${COMPOSE_FILE}" "${STACK_NAME}"

    # Wait for the platform to become available before proceeding
    echo "* Waiting for the Platform to become available - this can take a few minutes"
    echo
    TOOL_SLEEP_TIME=30
    until [[ $(docker service ls --format "{{.Replicas}}" | grep '0/[0-9]*' | wc -l ) == 0 ]]; do pretty_sleep ${TOOL_SLEEP_TIME} Platform; done

    # Wait for Nginx to come up before proceeding
    echo "* Waiting for Nginx to become available"
    until [[ $(curl -k -I -s -u ${INITIAL_ADMIN_USER}:${INITIAL_ADMIN_PASSWORD_PLAIN} ${PROTO}://${TARGET_HOST}/|head -n 1|cut -d$' ' -f2) == 200 ]]; do pretty_sleep 5 Nginx; done
    
    # Tell the user something useful
    echo
    echo '#######################################################################################################'
    echo
    echo "SUCCESS, your new ADOP stack is ready!"
    echo
    echo "Navigate to http://${TARGET_HOST} in your browser to use your new DevOps Platform!"
    echo "Login using the following credentials:"
    echo "  Username: ${INITIAL_ADMIN_USER}"
    echo "  Password: ${INITIAL_ADMIN_PASSWORD_PLAIN}"
    echo
    echo '#######################################################################################################'
    echo
}

run_stack() {
    # Load variables
    prep_env

    stack_cmd=$1
    shift

    docker stack ${stack_cmd} "$@"
}

shift $(($OPTIND -1))
SUBCOMMAND_OPT="${1:-help}"

# Only shift if there are other parameters
if [ $# -ge 1 ]; then
    shift
fi

case ${SUBCOMMAND_OPT} in
    "cmd_desc"|"help")
        ${SUBCOMMAND_OPT} "$@"
        ;;
    "deploy")
        deploy "$@"
        ;;    
    *)
        run_stack ${SUBCOMMAND_OPT} "$@"
        ;;
esac
